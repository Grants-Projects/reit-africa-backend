openapi: 3.0.0
info:
  title: 'Reit Africa Backend Service'
  description: 'This service provides endpoints for all related interactions'
  version: 1.0.0
  contact:
    name: 'Marvelous'
    email: 'marv@reit-africa.com'

x-organization: reit-africa
x-service-id: backend

servers:
  - description: Staging Ingress
    url: https://api.reit-africa

tags:
  - name: onboarding
    description: 'User onboarding related endpoints'
  - name: auth
    description: 'auth related endpoints'

security:
  - bearerToken: []

paths:
  /api/v1/onboarding/:
    post:
      summary: 'Endpoint to signup users'
      operationId: registerUser
      x-visibility: public
      tags:
        - 'onboarding'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

  /api/v1/auth/login:
    post:
      summary: 'Endpoint to login users'
      operationId: loginUser
      x-visibility: public
      tags:
        - 'auth'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # REQUEST OBJECT DEFINITIONS
    UserSignup:
      type: object
      required:
        - firstName
        - lastName
        - email
        - address
        - appPubKey
        - idToken
      properties:
        firstName:
          type: string
          format: string
          description: The fullname of User to be added
        lastName:
          type: string
          format: string
          description: The fullname of User to be added
        email:
          type: string
          description: User's email
        address:
          type: string
          description: User's address
        appPubKey:
          type: string
          description: web3 auth pubkey
        idToken:
          type: string
          description: id token generated from web3 token

    UserLogin:
      type: object
      required:
        - email
        - appPubKey
        - idToken
      properties:
        email:
          type: string
          description: The email of the User attempting login
        appPubKey:
          type: string
          description: app pubkey
        idToken:
          type: string
          description: id token

    SuccessMessage:
      type: object
      properties:
        success:
          type: boolean
          description: Returns a true to state that action was successful
          example: true
        message:
          type: string
          description: Message for successful operation
          example: Verification otp has been sent to your email

    # RESPONSE OBJECT DEFINITIONS

    SignupResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            address:
              type: string
              description: user's address
            walletBalance:
              type: string
              description: user's wallet
            createdAt:
              type: string
              description: created date
            updatedAt:
              type: string
              description: updated at

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
          description: authorizes a valid user

    User:
      type: 'object'
      required:
        - 'id'
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'userType'
      properties:
        id:
          type: 'string'
          format: 'uuid'
          description: 'The id of the User'
        firstName:
          type: 'string'
          description: 'The firstname of user'
        lastName:
          type: 'string'
          description: 'The lastname of user'
        email:
          type: 'string'
          format: 'email'
          description: 'The email of  user'

    ErrorMessageDto:
      $ref: 'http://api-spec-common-dto.s3-website.eu-west-2.amazonaws.com'

    StatusDto:
      $ref: 'http://api-spec-common-dto.s3-website.eu-west-2.amazonaws.com'

    # ENUM DEFINITIONS
  responses:
    StatusResponse:
      description: Request status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusDto'
          example:
            success: true
            message: 'Action completed successfully'
            data:
              label: name  of service
              expiry: date

    InvalidRequest:
      description: Request could not be validated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'BAD_REQUEST'
            message: 'Request could not be validated.'

    Unauthorized:
      description: Client is not authorized to make request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'UNAUTHORIZED'
            message: 'Either client security header is missing or it is not valid.'

    NotFound:
      description: Entity was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'NOT_FOUND'
            message: 'Information could not be found'

    ConflictError:
      description: Entity already exist while user tries to create it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'ACCESS_DENIED'
            message: 'Entity already exist!'

    AccessDenied:
      description: Expected permission is not available.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'ACCESS_DENIED'
            message: 'Expected permission or scope is not present.'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'INTERNAL_ERROR'
            message: 'An internal server error occurred.'

  securitySchemes:
    bearerToken:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
      description: 'Authentication for user-facing endpoints. Uses bearer token in API prefix.'
    authToken:
      type: 'apiKey'
      name: 'x-auth-token'
      in: 'header'
      description: 'Auth Token header for inter-service  communication'
