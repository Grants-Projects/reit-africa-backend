/* tslint:disable */
/* eslint-disable */
/**
 * Reit Africa Backend Service
 * This service provides endpoints for all related interactions
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: marv@reit-africa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * authorizes a valid user
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     * The id of the User
     * @type {string}
     * @memberof SignupResponse
     */
    'id': string;
    /**
     * The firstname of user
     * @type {string}
     * @memberof SignupResponse
     */
    'firstName': string;
    /**
     * The lastname of user
     * @type {string}
     * @memberof SignupResponse
     */
    'lastName': string;
    /**
     * The email of  user
     * @type {string}
     * @memberof SignupResponse
     */
    'email': string;
    /**
     * user\'s address
     * @type {string}
     * @memberof SignupResponse
     */
    'address'?: string;
    /**
     * user\'s wallet
     * @type {string}
     * @memberof SignupResponse
     */
    'walletBalance'?: string;
    /**
     * created date
     * @type {string}
     * @memberof SignupResponse
     */
    'createdAt'?: string;
    /**
     * updated at
     * @type {string}
     * @memberof SignupResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SignupResponseAllOf
 */
export interface SignupResponseAllOf {
    /**
     * user\'s address
     * @type {string}
     * @memberof SignupResponseAllOf
     */
    'address'?: string;
    /**
     * user\'s wallet
     * @type {string}
     * @memberof SignupResponseAllOf
     */
    'walletBalance'?: string;
    /**
     * created date
     * @type {string}
     * @memberof SignupResponseAllOf
     */
    'createdAt'?: string;
    /**
     * updated at
     * @type {string}
     * @memberof SignupResponseAllOf
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SuccessMessage
 */
export interface SuccessMessage {
    /**
     * Returns a true to state that action was successful
     * @type {boolean}
     * @memberof SuccessMessage
     */
    'success'?: boolean;
    /**
     * Message for successful operation
     * @type {string}
     * @memberof SuccessMessage
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The id of the User
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * The firstname of user
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * The lastname of user
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * The email of  user
     * @type {string}
     * @memberof User
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     * The email of the User attempting login
     * @type {string}
     * @memberof UserLogin
     */
    'email': string;
    /**
     * app pubkey
     * @type {string}
     * @memberof UserLogin
     */
    'appPubKey': string;
    /**
     * id token
     * @type {string}
     * @memberof UserLogin
     */
    'idToken': string;
}
/**
 * 
 * @export
 * @interface UserSignup
 */
export interface UserSignup {
    /**
     * The fullname of User to be added
     * @type {string}
     * @memberof UserSignup
     */
    'firstName': string;
    /**
     * The fullname of User to be added
     * @type {string}
     * @memberof UserSignup
     */
    'lastName': string;
    /**
     * User\'s email
     * @type {string}
     * @memberof UserSignup
     */
    'email': string;
    /**
     * User\'s address
     * @type {string}
     * @memberof UserSignup
     */
    'address': string;
    /**
     * web3 auth pubkey
     * @type {string}
     * @memberof UserSignup
     */
    'appPubKey': string;
    /**
     * id token generated from web3 token
     * @type {string}
     * @memberof UserSignup
     */
    'idToken': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint to login users
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (userLogin?: UserLogin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Endpoint to login users
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(userLogin?: UserLogin, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(userLogin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Endpoint to login users
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(userLogin?: UserLogin, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.loginUser(userLogin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Endpoint to login users
     * @param {UserLogin} [userLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginUser(userLogin?: UserLogin, options?: AxiosRequestConfig): AxiosPromise<LoginResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @summary Endpoint to login users
     * @param {UserLogin} [userLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginUser(userLogin?: UserLogin, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginUser(userLogin, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OnboardingApi - axios parameter creator
 * @export
 */
export const OnboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint to signup users
         * @param {UserSignup} [userSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (userSignup?: UserSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/onboarding/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingApi - functional programming interface
 * @export
 */
export const OnboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Endpoint to signup users
         * @param {UserSignup} [userSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(userSignup?: UserSignup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(userSignup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingApi - factory interface
 * @export
 */
export const OnboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingApiFp(configuration)
    return {
        /**
         * 
         * @summary Endpoint to signup users
         * @param {UserSignup} [userSignup] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(userSignup?: UserSignup, options?: any): AxiosPromise<SignupResponse> {
            return localVarFp.registerUser(userSignup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnboardingApi - interface
 * @export
 * @interface OnboardingApi
 */
export interface OnboardingApiInterface {
    /**
     * 
     * @summary Endpoint to signup users
     * @param {UserSignup} [userSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApiInterface
     */
    registerUser(userSignup?: UserSignup, options?: AxiosRequestConfig): AxiosPromise<SignupResponse>;

}

/**
 * OnboardingApi - object-oriented interface
 * @export
 * @class OnboardingApi
 * @extends {BaseAPI}
 */
export class OnboardingApi extends BaseAPI implements OnboardingApiInterface {
    /**
     * 
     * @summary Endpoint to signup users
     * @param {UserSignup} [userSignup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public registerUser(userSignup?: UserSignup, options?: AxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).registerUser(userSignup, options).then((request) => request(this.axios, this.basePath));
    }
}


export default {};
